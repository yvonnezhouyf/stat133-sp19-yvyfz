---
title: "workout03-yvonne-zhou(check)"
author: "Yvonne Zhou"
date: "5/2/2019"
output: html_document
---

```{r}
# private auxiliary function to check if trials is valid
check_trials <- function(trials) {
  if(trials > 0 && (trials %% 1 == 0) && (length(trials) == 1)) {
    return(TRUE)
  }
  stop("invalid trials value")
}

# private auxiliary function to check if prob is valid
check_prob <- function(prob) {
  if (prob <= 1 && prob >= 0 && (length(trials) == 1)) {
    return(TRUE)
  }
  stop("invalid prob value")
}

# private auxiliary function to check if success is valid
check_success <- function(success, trials) {
  for (i in length(success)) {
    if (success[i] > trials || success[i] < 0 || (success[i] %% 1 != 0)) {
      stop("invalid success value")
    }
    return(TRUE)
  }
}

#' @title bin_choose
#' @description calculate n choose k
#' @param n
#' @param k
#' @return the result of n choose k
#' @export
#' @examples bin_choose(n = 5, k = 2)
#' @examples bin_choose(5, 0)
#' @examples bin_choose(5, 1:3)
bin_choose <- function(n, k) {
  if (max(k) == 1 && k > n) {
    stop("k cannot be greater than n")
  }
  return(factorial(n) / (factorial(k) * factorial(n - k)))
}

#' @title bin_variable
#' @description calculate n choose k
#' @param n
#' @param k
#' @return a binvar object
#' @export
#' @examples bin_variable(trials = 10, p = 0.3)
bin_variable <- function(trials, prob) {
  if(check_trials(trials) && check_prob(prob)) {
    result = list(trials, prob)
    names(result) = c("trials", "prob")
    class(result) = "binvar"
    return(result)
  }
}

#' @title bin_probability
#' @description calculate the probability of success with a number of trials with prob of success in each trial
#' @param success
#' @param trials
#' @param prob
#' @return the probability
#' @export
#' @examples bin_probability(success = 2, trials = 5, prob = 0.5)
#' @examples bin_probability(success = 0:2, trials = 5, prob = 0.5)
#' @examples bin_probability(success = 55, trials = 100, prob = 0.45)
bin_probability <- function(success, trials, prob) {
  if(!check_trials(trials)) {
    stop("invalid trials value")
  } else if (!check_prob(prob)) {
    stop("invalid prob value")
  } else if (!check_successes(success, trials)) {
    stop("invalid success value")
  } else {
    return(bin_choose(trials, success) * (prob ** success) * ((1 - prob) ** (trials - success)))
  }
}

#' @export
print.binvar <- function(bin) {
  cat("\"Binomial variable\" \n\nParamaters\n- number of trials: ")
  cat(bin$trials)
  cat("\n- prob of success : ")
  cat(bin$prob)
}

#' @export
summary.binvar <- function(bin) {
  result = list(trials = bin$trials, prob = bin$prob,
                mean = aux_mean(bin$trials, bin$prob),
                variance = aux_variance(bin$trials, bin$prob),
                mode = aux_mode(bin$trials, bin$prob),
                skewness = aux_skewness(bin$trials, bin$prob),
                kurtosis = aux_kurtosis(bin$trials, bin$prob))
  class(result) = "summary.binvar"
  return(result)
}

#' @export
print.summary.binvar <- function(bin) {
  cat("\"Binomial variable\" \n\nParamaters\n- number of trials: ")
  cat(bin$trials)
  cat("\n- prob of success : ")
  cat(bin$prob)
  cat("\n\nMeasures\n- mean    : ")
  cat(bin$mean)
  cat("\n- variance: ")
  cat(bin$variance)
  cat("\n- mode    : ")
  cat(bin$mode)
  cat("\n- skewness: ")
  cat(bin$skewness)
  cat("\n- kurtosis: ")
  cat(bin$kurtosis)
}

#' @title bin_distribution
#' @description get a data frame that the first column is the number of success, and the second column is the probability
#' @param trials
#' @param prob
#' @return the data frame with the probability distribution
#' @export
#' @examples bin_distribution(trials = 5, prob = 0.5)
bin_distribution <- function(trials, prob) {
  result = data.frame(0:trials, bin_probability(0:trials, trials, prob))
  names(result) = c("success", "probability")
  class(result) = c("bindis", "data.frame")
  return(result)
}

#' @title bin_cumulative
#' @description get a data frame that the first column is the number of success, the second column is the probability, and the third column is the cumulative probability
#' @param trials
#' @param prob
#' @return the data frame with the probability distribution and the cumulative of probability
#' @export
#' @examples bin_cumulative(trials = 5, prob = 0.5)
bin_cumulative <- function(trials, prob) {
  added = c()
  add = 0
  for (i in 0:trials) {
    add = add + bin_probability(i, trials, prob)
    added = append(added, add)
  }
  result = data.frame(0:trials, bin_probability(0:trials, trials, prob), added)
  names(result) = c("success", "probability", "cumulative")
  class(result) = c("bincum", "data.frame")
  return(result)
}

# private auxiliary function to calculate the mean
aux_mean <- function(trials, prob) {
  return(trials * prob)
}

# private auxiliary function to calculate the variance
aux_variance <- function(trials, prob) {
  return(trials * prob * (1 - prob))
}

# private auxiliary function to calculate the mode
aux_mode <- function(trials, prob) {
  result = trials * prob + prob
  if ((result %% 1 == 0) && (result %% 2 = 1)) {
    return(c(result, result - 1))
  }
  return(as.integer(result))
}

# private auxiliary function to calculate the skewness
aux_skewness <- function(trials, prob) {
  return((1 - 2 * prob) / ((trials * prob * (1 - prob)) ** 0.5))
}

# private auxiliary function to calculate the kurtosis
aux_kurtosis <- function(trials, prob) {
  return((1 - 6 * prob * (1 - prob)) / (trials * prob * (1 - prob)))
}

#' @export
plot.bindis <- function(df) {
  barplot(df$probability, xlab = "successes", ylab = "probability", names.arg = df$success)
}

#' @export
plot.bincum <- function(df) {
  plot(df$success, df$cumulative, xlab = "successes", ylab = "probability", type = "o")
}

bin_mean <- function(trials, prob) {
  if(check_trials(trials) && check_prob(prob)) {
    return(aux_mean(trials, prob))
  }
}

bin_variance <- function(trials, prob) {
  if(check_trials(trials) && check_prob(prob)) {
    return(aux_variance(trials, prob))
  }
}

bin_mode <- function(trials, prob) {
  if(check_trials(trials) && check_prob(prob)) {
    return(aux_mode(trials, prob))
  }
}

bin_skewness <- function(trials, prob) {
  if(check_trials(trials) && check_prob(prob)) {
    return(aux_skewness(trials, prob))
  }
}

bin_kurtosis <- function(trials, prob) {
  if(check_trials(trials) && check_prob(prob)) {
    return(aux_kurtosis(trials, prob))
  }
}
```

```{r}
# probability of getting 2 successes in 5 trials
# (assuming prob of success = 0.5)
bin_probability(success = 2, trials = 5, prob = 0.5)
## [1] 0.3125

# probabilities of getting 2 or less successes in 5 trials
# (assuming prob of success = 0.5)
bin_probability(success = 0:2, trials = 5, prob = 0.5)
## [1] 0.03125 0.15625 0.31250

# 55 heads in 100 tosses of a loaded coin with 45% chance of heads
bin_probability(success = 55, trials = 100, prob = 0.45)
## [1] 0.01075277
```

```{r}
bin_choose(n = 5, k = 2)
bin_choose(5, 0)
bin_choose(5, 1:3)

choose(5, 2)
choose(5, 0)
choose(5, 1:3)
```

```{r}
bin_mean(10, 0.3)
## [1] 3
bin_variance(10, 0.3)
## [1] 2.1
bin_mode(10, 0.3)
## [1] 3
bin_skewness(10, 0.3)
## [1] 0.2760262
bin_kurtosis(10, 0.3)
## [1] -0.1238095
```

```{r}
dis1 <- bin_distribution(trials = 5, prob = 0.5)
plot(dis1)
```

```{r}
# plotting binomial cumulative distribution
dis2 <- bin_cumulative(trials = 5, prob = 0.5)
plot(dis2)
```

```{r}
aux_mean(10, 0.3)
## [1] 3
aux_variance(10, 0.3)
## [1] 2.1
aux_mode(10, 0.3)
## [1] 3
aux_skewness(10, 0.3)
## [1] 0.2760262
aux_kurtosis(10, 0.3)
## [1] -0.1238095
```

```{r}
# binomial probability distribution
bin_distribution(trials = 5, prob = 0.5)
## success probability
## 1 0 0.03125
## 2 1 0.15625
## 3 2 0.31250
## 4 3 0.31250
## 5 4 0.15625
## 6 5 0.03125
```

```{r}
# binomial cumulative distribution
bin_cumulative(trials = 5, prob = 0.5)
## success probability cumulative
## 1 0 0.03125 0.03125
## 2 1 0.15625 0.18750
## 3 2 0.31250 0.50000
## 4 3 0.31250 0.81250
## 5 4 0.15625 0.96875
## 6 5 0.03125 1.00000
```

```{r}
bin1 <- bin_variable(trials = 10, p = 0.3)
bin1
```

```{r}
bin1 <- bin_variable(trials = 10, p = 0.3)
binsum1 <- summary(bin1)
binsum1
```


```{r}
bin_probability <- function(success, trials, prob) {
  if(!check_trials(trials)) {
    stop("invalid trials value")
  } else if (!check_prob(prob)) {
    stop("invalid prob value")
  } else if (!check_success(success, trials)) {
    stop("invalid success value")
  } else {
    return(bin_choose(trials, success) * (prob ** success) * ((1 - prob) ** (trials - success)))
  }
}
```

```{r}
bin_distribution(3, 0.5)
```

